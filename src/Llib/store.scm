(module srfi25/store
   (export (store-set! store index::long val)
           (store-ref store index::long)
           (inline store-length store)
           (make-store size::long #!key (type #unspecified) (default #unspecified))
           (inline store-type store)))


(define +empty-symbol+ (string->symbol ""))

(define (make-store size::long #!key (type #unspecified) (default #unspecified))
   (define (or-else v)
      (if (eq? default #unspecified)
          v
          default))
   (case type
      ((s8) (make-s8vector size (or-else #s8:0)))
      ((u8) (make-u8vector size (or-else #u8:0)))
      ((s16) (make-s16vector size (or-else #s16:0)))
      ((u16) (make-u16vector size (or-else #u16:0)))
      ((s32) (make-s32vector size (or-else #s32:0)))
      ((u32) (make-u32vector size (or-else #u32:0)))
      ((s64) (make-s64vector size (or-else #s64:0)))
      ((u64) (make-u64vector size (or-else #u64:0)))
      ((f32) (make-f32vector size (or-else 0.0)))
      ((f64) (make-f64vector size (or-else 0.0)))
      (else (make-vector size default))))


;;; (vector|hvector x long x obj) -> unspecified
(define (store-set! store index::long val)
   (if (vector? store)
       (vector-set! store index val)
       (case ($hvector-ident store)
	  ;; the function $hvector-ident assumes a strict ordering
	  ;; for hvector type definitions (see bigloo.h)
	  ((0)
	   (s8vector-set! store index val))
	  ((1)
	   (u8vector-set! store index val))
	  ((2)
	   (s16vector-set! store index val))
	  ((3)
	   (u16vector-set! store index val))
	  ((4)
	   (s32vector-set! store index val))
	  ((5)
	   (u32vector-set! store index val))
	  ((6)
	   (s64vector-set! store index val))
	  ((7)
	   (u64vector-set! store index val))
	  ((8)
	   (f32vector-set! store index val))
	  ((9)
	   (f64vector-set! store index val)))))

;;; (vector|hvector x long) -> obj 
(define (store-ref store index::long)
   (if (vector? store)
       (vector-ref store index)
       (case ($hvector-ident store)
	  ;; the function $hvector-ident assumes a strict ordering
	  ;; for hvector type definitions (see bigloo.h)
	  ((0)
	   (s8vector-ref store index))
	  ((1)
	   (u8vector-ref store index))
	  ((2)
	   (s16vector-ref store index))
	  ((3)
	   (u16vector-ref store index))
	  ((4)
	   (s32vector-ref store index))
	  ((5)
	   (u32vector-ref store index))
	  ((6)
	   (s64vector-ref store index))
	  ((7)
	   (u64vector-ref store index))
	  ((8)
	   (f32vector-ref store index))
	  ((9)
	   (f64vector-ref store index)))))

;;; (vector|hvector) -> long
(define-inline (store-length store)
   (if (vector? store)
       (vector-length store)
       ($hvector-length store)))

(define-inline (store-type store)
   (if (vector? store)
       (string->symbol "")
       (case ($hvector-ident store)
	  ;; the function $hvector-ident assumes a strict ordering
	  ;; for hvector type definitions (see bigloo.h)
	  ((0)
	   's8)
	  ((1)
	   'u8)
	  ((2)
	   's16)
	  ((3)
	   'u16)
	  ((4)
	   's32)
	  ((5)
	   'u32)
	  ((6)
	   's64)
	  ((7)
	   'u64)
	  ((8)
	   'f32)
	  ((9)
	   'f64))))

